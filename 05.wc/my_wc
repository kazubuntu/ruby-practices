#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

def main
  options = parse_options

  if ARGV.empty?
    text_of_stdin = $stdin.read
    stat_of_text_of_stdin = count_lines_words_bytes(text_of_stdin)
    print_stat_of_text_of_stdin(stat_of_text_of_stdin, options)
  else
    texts_of_files = ARGV.map { |file| File.read(file) }
    stats_of_texts_of_files = count_stats_in_texts_of_files(texts_of_files)
    print_stats_of_texts_of_files(stats_of_texts_of_files, options)
  end
end

def parse_options
  options = {}
  OptionParser.new do |opt|
    opt.on('-l') { |v| options[:lines] = v }
    opt.on('-w') { |v| options[:words] = v }
    opt.on('-c') { |v| options[:bytes] = v }
    opt.parse!(ARGV)
  end
  options
end

def count_stats_in_texts_of_files(texts)
  texts.map do |text|
    count_lines_words_bytes(text)
  end
end

def count_lines_words_bytes(text)
  {
    lines: text.lines.size,
    words: text.split.size,
    bytes: text.bytesize
  }
end

def print_stat_of_text_of_stdin(stat, options)
  formated_stat = format_stat(stat, options)
  puts formated_stat
end

def format_stat(stat, options)
  filtered_stat = filter_stat(stat, options)
  if options.size == 1
    filtered_stat.join(' ')
  else
    filtered_stat.map { |item| item.to_s.rjust(7) }.join(' ')
  end
end

def filter_stat(stat, options)
  stat.filter_map { |key, value| value if options[key] || options.empty? }
end

def print_stats_of_texts_of_files(stats, options)
  formated_stats = format_stats(stats, options)
  if ARGV.size == 1
    puts formated_stats[0]
  else
    formated_stats.each { |formated_stat| puts formated_stat }
  end
end

def format_stats(stats, options)
  total_stat = count_total_stat(stats)
  max_width = calc_max_width(total_stat)
  filtered_stats = filter_stats(stats, total_stat, options)
  filtered_stats_added_filename = add_filename(filtered_stats)
  filtered_stats_added_filename.map do |filtered_stat|
    if options.size == 1 && ARGV.size == 1
      filtered_stat.join(' ')
    else
      filtered_stat.map { |item| item.is_a?(Integer) ? item.to_s.rjust(max_width) : item }.join(' ')
    end
  end
end

def count_total_stat(stats)
  lines = 0
  words = 0
  bytes = 0
  stats.each do |stat|
    lines += stat[:lines]
    words += stat[:words]
    bytes += stat[:bytes]
  end
  { lines:, words:, bytes: }
end

def calc_max_width(total_stat)
  total_stat.values.inject(0) { |result, value| [result, value].max }.to_s.length
end

def filter_stats(stats, total_stat, options)
  stats.push(total_stat).map do |stat|
    stat.filter_map { |key, value| value if options[key] || options.empty? }
  end
end

def add_filename(filtered_stats)
  filenames = ARGV + ['合計']
  filtered_stats.zip(filenames).map(&:flatten)
end

main
