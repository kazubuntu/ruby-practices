#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

def main
  options = parse_options

  if ARGV.empty?
    text_of_stdin = read_text_from_stdin
    stat_of_text_of_stdin = count_lines_words_bytes_in_text_of_stdin(text_of_stdin)
    print_stat_of_text_of_stdin(stat_of_text_of_stdin, options)
  else
    texts_of_files = read_texts_from_files
    stats_of_texts_of_files = count_lines_words_bytes_in_texts_of_files(texts_of_files)
  end
end

def parse_options
  options = {}
  OptionParser.new do |opt|
    opt.on('-l') { |v| options[:lines] = v }
    opt.on('-w') { |v| options[:words] = v }
    opt.on('-c') { |v| options[:bytes] = v }
    opt.parse!(ARGV)
  end
  options
end

def read_text_from_stdin
  $stdin.read
end

def read_texts_from_files
  ARGV.map { |file| File.read(file) }
end

def count_lines_words_bytes_in_text_of_stdin(text)
  {
    lines: text.lines.size,
    words: text.split.size,
    bytes: text.bytesize
  }
end

def count_lines_words_bytes_in_texts_of_files(texts)
  texts.map do |text|
    {
      lines: text.lines.size,
      words: text.split.size,
      bytes: text.bytesize
    }
  end
end

def print_stat_of_text_of_stdin(stat, options)
  formated_stat = format_stat(stat, options)
  puts formated_stat
end

def format_stat(stat, options)
  filtered_stat = filter_stat(stat, options)
  if options.size == 1
    filtered_stat.join(' ')
  else
    filtered_stat.map { |item| item.to_s.rjust(7) }.join(' ')
  end
end

def filter_stat(stat, options)
  stat.filter_map { |key, value| value if options[key] || options.empty? }
end

main
