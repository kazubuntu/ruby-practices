#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

def main
  params = ARGV.getopts('a', 'r')

  files = ARGV.select { |arg| File.file?(arg) }.sort
  directories = ARGV.empty? ? ['.'] : ARGV.select { |arg| File.directory?(arg) }.sort
  if params['r']
    files = files.reverse
    directories = directories.reverse
  end
  files_size = files.size
  directories_size = directories.size
  print_files(files, directories_size) unless files.empty?
  print_directories(directories, directories_size, files_size, params)
end

def print_files(files, directories_size)
  print_list(files)
  puts unless directories_size.zero?
end

def print_directories(directories, directories_size, files_size, params)
  directories.each_with_index do |directory, index|
    puts "#{directory}:" if directories_size > 1 || files_size.positive?
    directory_entries = read_directory(directory, params)
    print_list(directory_entries)
    puts if index < directories_size - 1
  end
end

def read_directory(directory, params)
  flags = params['a'] ? File::FNM_DOTMATCH : 0
  directory_entries = Dir.glob('*', flags, base: directory)
  params['r'] ? directory_entries.reverse : directory_entries
end

# 最大列数を指定し、行と列を入れ替えて表示する
def print_list(entries)
  return if entries.empty?

  max_colmun = 3.0
  slice_size = (entries.size / max_colmun).ceil
  sliced_entries = entries.each_slice(slice_size).map do |entry|
    max_width = calc_width(entry)
    multi_byte_ljust(entry, max_width + 2)
  end
  zipped_entries = sliced_entries[0].zip(*sliced_entries[1..])
  zipped_entries.each do |zipped_entry|
    zipped_entry.each { |entry| print entry }
    puts
  end
end

# 列の最大表示幅を計算する。全角の表示幅は半角の2倍とする
def calc_width(entry)
  entry.map do |entry_name|
    entry_name.each_char.map { |char| char.bytesize == 1 ? 1 : 2 }.sum
  end.max
end

def multi_byte_ljust(entry, max_width)
  entry.map do |entry_name|
    width = entry_name.each_char.map { |char| char.bytesize == 1 ? 1 : 2 }.sum
    padding = max_width - width
    entry_name + ' ' * padding
  end
end

main
